package de.fe1k.game9.utils;

import de.nerogar.noise.util.Vector2f;

import java.util.Optional;

// 2D-AABB
public class Bounding {
	private Vector2f min;
	private Vector2f max;

	public Bounding() {
		this(new Vector2f(), new Vector2f(1));
	}

	public Bounding(Vector2f min, Vector2f max) {
		this.min = min;
		this.max = max;
	}

	public Bounding(float minX, float minY, float maxX, float maxY) {
		this(new Vector2f(minX, minY), new Vector2f(maxX, maxY));
	}

	public Vector2f getMin() {
		return min;
	}

	public void setMin(Vector2f min) {
		this.min = min;
	}

	public Vector2f getMax() {
		return max;
	}

	public void setMax(Vector2f max) {
		this.max = max;
	}

	public Optional<Vector2f> getEscapeVector(Bounding bounding) {
		float gapXR = bounding.getMin().getX() - getMax().getX();
		float gapXL = getMin().getX() - bounding.getMax().getX();
		float gapYU = bounding.getMin().getY() - getMax().getY();
		float gapYD = getMin().getY() - bounding.getMax().getY();
		if (gapXL >= 0 || gapXR >= 0 || gapYD >= 0 || gapYU >= 0) {
			return Optional.empty();
		}
		Vector2f escape = new Vector2f();
		escape.setX(Math.abs(gapXL) < Math.abs(gapXR) ? -gapXL : gapXR);
		escape.setY(Math.abs(gapYD) < Math.abs(gapYU) ? -gapYD : gapYU);
		return Optional.of(escape);
	}

	public Bounding translated(Vector2f pos) {
		return new Bounding(min.added(pos), max.added(pos));
	}

	@Override
	public String toString() {
		return "Bounding{" +
				"min=" + min +
				", max=" + max +
				'}';
	}

	@Override
	public boolean equals(Object o) {
		// generated by IntelliJ IDEA
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;

		Bounding bounding = (Bounding) o;

		if (min != null ? !min.equals(bounding.min) : bounding.min != null) return false;
		return max != null ? max.equals(bounding.max) : bounding.max == null;
	}

	@Override
	public int hashCode() {
		// generated by IntelliJ IDEA
		int result = min != null ? min.hashCode() : 0;
		result = 31 * result + (max != null ? max.hashCode() : 0);
		return result;
	}
}
